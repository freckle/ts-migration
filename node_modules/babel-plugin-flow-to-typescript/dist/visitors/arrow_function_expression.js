"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@babel/types");
const convert_type_parameter_declaration_1 = require("../converters/convert_type_parameter_declaration");
const transform_function_params_1 = require("../transforms/transform_function_params");
const replaceWith_1 = require("../utils/replaceWith");
function ArrowFunctionExpression(path, state) {
    transform_function_params_1.transformFunctionParams(path.get('params'));
    // @ts-ignore todo: add babel type
    path.get('predicate').remove();
    if (types_1.isTypeParameterDeclaration(path.node.typeParameters)) {
        const tsTypeParameterDeclaration = convert_type_parameter_declaration_1.convertTypeParameterDeclaration(path.node.typeParameters);
        if (state.opts.isJSX) {
            // workaround for tsx files to differentiate type parameters from jsx
            tsTypeParameterDeclaration.params[0].constraint = types_1.tsAnyKeyword();
        }
        replaceWith_1.replaceWith(path.get('typeParameters'), tsTypeParameterDeclaration);
    }
}
exports.ArrowFunctionExpression = ArrowFunctionExpression;
//# sourceMappingURL=arrow_function_expression.js.map