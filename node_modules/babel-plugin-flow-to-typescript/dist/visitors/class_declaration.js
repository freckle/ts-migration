"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@babel/types");
const convert_interface_declaration_1 = require("../converters/convert_interface_declaration");
const convert_type_parameter_instantiation_1 = require("../converters/convert_type_parameter_instantiation");
const convert_type_parameter_declaration_1 = require("../converters/convert_type_parameter_declaration");
const replaceWith_1 = require("../utils/replaceWith");
const transform_class_body_1 = require("../transforms/transform_class_body");
function ClassDeclaration(path) {
    const node = path.node;
    const superTypeParameters = node.superTypeParameters;
    if (types_1.isTypeParameterInstantiation(superTypeParameters)) {
        replaceWith_1.replaceWith(path.get('superTypeParameters'), convert_type_parameter_instantiation_1.convertTypeParameterInstantiation(superTypeParameters));
    }
    const typeParameters = node.typeParameters;
    if (types_1.isTypeParameterDeclaration(typeParameters)) {
        replaceWith_1.replaceWith(path.get('typeParameters'), convert_type_parameter_declaration_1.convertTypeParameterDeclaration(typeParameters));
    }
    const classImplements = node.implements;
    if (Array.isArray(classImplements)) {
        const classImplements = path.get('implements');
        if (classImplements !== null) {
            for (const classImplement of classImplements) {
                if (classImplement.isClassImplements()) {
                    replaceWith_1.replaceWith(classImplement, convert_interface_declaration_1.convertInterfaceExtends(classImplement.node));
                }
            }
        }
    }
    transform_class_body_1.transformClassBody(path.get('body'));
}
exports.ClassDeclaration = ClassDeclaration;
//# sourceMappingURL=class_declaration.js.map