"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@babel/types");
const helper_types_1 = require("../helper_types");
const util_1 = require("../util");
exports.default = {
    enter(path) {
        const [firstNode] = path.node.body;
        if (firstNode && firstNode.leadingComments && firstNode.leadingComments.length) {
            const commentIndex = firstNode.leadingComments.findIndex(item => item.value.trim() === '@flow');
            if (commentIndex !== -1) {
                path.get(`body.0.leadingComments.${commentIndex}`).remove();
            }
        }
        // @ts-ignore recast support
        if (firstNode && firstNode.comments && firstNode.comments.length) {
            // @ts-ignore recast support
            const commentIndex = firstNode.comments.findIndex(item => item.value.trim() === '@flow');
            if (commentIndex !== -1) {
                // @ts-ignore recast support
                firstNode.comments.splice(commentIndex, 1);
            }
        }
    },
    exit(path) {
        path.traverse({
            /* istanbul ignore next */
            Flow(path) {
                throw path.buildCodeFrameError('not converted flow node: ' + path.node.type);
            },
        });
        const usedHelperTypes = new Set();
        path.traverse({
            TSTypeReference(typeReferencePath) {
                const node = typeReferencePath.node;
                if (types_1.isIdentifier(node.typeName)) {
                    const name = node.typeName.name;
                    if (name === '$Call') {
                        if (node.typeParameters) {
                            if (node.typeParameters.params.length === 1) {
                                node.typeName.name = 'ReturnType';
                            }
                            else if (node.typeParameters.params.length === 2) {
                                node.typeName.name = '$Call1';
                                usedHelperTypes.add('$Call1');
                            }
                            else if (node.typeParameters.params.length === 3) {
                                node.typeName.name = '$Call2';
                                usedHelperTypes.add('$Call2');
                            }
                            else if (node.typeParameters.params.length === 4) {
                                node.typeName.name = '$Call3';
                                usedHelperTypes.add('$Call3');
                            }
                            else if (node.typeParameters.params.length === 5) {
                                node.typeName.name = '$Call4';
                                usedHelperTypes.add('$Call4');
                            }
                            else if (node.typeParameters.params.length === 6) {
                                node.typeName.name = '$Call5';
                                usedHelperTypes.add('$Call5');
                            }
                            else {
                                util_1.warnOnlyOnce('$Call utility type is used with more then 6 type parameters - this is crazy, do not want to fix');
                            }
                        }
                    }
                    else {
                        // @ts-ignore
                        if (helper_types_1.default[name]) {
                            // @ts-ignore
                            usedHelperTypes.add(name);
                        }
                    }
                }
            },
        });
        const body = path.get('body');
        const imports = body.filter(st => st.isImportDeclaration());
        let after;
        if (imports.length > 0) {
            after = imports[imports.length - 1];
        }
        usedHelperTypes.forEach(helperName => {
            if (after)
                after.insertAfter(helper_types_1.default[helperName]);
            else
                body[0].insertBefore(helper_types_1.default[helperName]);
        });
    },
};
//# sourceMappingURL=program.js.map