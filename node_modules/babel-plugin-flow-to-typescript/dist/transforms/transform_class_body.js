"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transform_function_params_1 = require("./transform_function_params");
function transformClassBody(path) {
  for (const elementPath of path.get("body")) {
    if (elementPath.isClassMethod()) {
      if (elementPath.node.kind === "constructor") {
        elementPath.get("returnType").remove();
      }
      transform_function_params_1.transformFunctionParams(
        elementPath.get("params")
      );
    }

    if (elementPath.isClassProperty()) {
      if (
        elementPath.node.typeAnnotation &&
        elementPath.node.typeAnnotation.typeAnnotation &&
        elementPath.node.typeAnnotation.typeAnnotation.type ===
          "FunctionTypeAnnotation"
      ) {
        elementPath.remove();
        continue;
      }
      // @ts-ignore todo: missing proppery in babel
      const variance = elementPath.node.variance;
      if (variance) {
        elementPath.node.readonly = variance && variance.kind === "plus";
        // @ts-ignore
        elementPath.node.variance = null;
      }
    }

    if (elementPath.isClassProperty()) {
      // @ts-ignore todo: missing proppery in babel
      const variance = elementPath.node.variance;
      if (variance) {
        elementPath.node.readonly = variance && variance.kind === "plus";
        // @ts-ignore
        elementPath.node.variance = null;
      }
    }
    // todo: commented out because it is not yet in ts
    // todo: missing method in babel
    // if (isClassPrivateMethod(elementPath.node)) {
    // }
    // todo: missing method in babel
    // if (isClassPrivateProperty(elementPath.node)) {
    //   elementPath.node.variance = null;
    // }
  }
}
exports.transformClassBody = transformClassBody;
//# sourceMappingURL=transform_class_body.js.map
