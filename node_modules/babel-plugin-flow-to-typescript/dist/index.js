"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const import_declaration_1 = require("./visitors/import_declaration");
const opaque_type_1 = require("./visitors/opaque_type");
const type_annotation_1 = require("./visitors/type_annotation");
const type_cast_expression_1 = require("./visitors/type_cast_expression");
const type_parameter_declaration_1 = require("./visitors/type_parameter_declaration");
const class_declaration_1 = require("./visitors/class_declaration");
const declare_class_1 = require("./visitors/declare_class");
const export_declaration_1 = require("./visitors/export_declaration");
const interface_declaration_1 = require("./visitors/interface_declaration");
const declare_function_1 = require("./visitors/declare_function");
const program_1 = require("./visitors/program");
const type_alias_1 = require("./visitors/type_alias");
const function_declaration_1 = require("./visitors/function_declaration");
const call_expression_1 = require("./visitors/call_expression");
const declare_variable_1 = require("./visitors/declare_variable");
const declare_type_alias_1 = require("./visitors/declare_type_alias");
const declare_interface_1 = require("./visitors/declare_interface");
const declare_opaque_type_1 = require("./visitors/declare_opaque_type");
const declare_module_exports_1 = require("./visitors/declare_module_exports");
const declare_module_1 = require("./visitors/declare_module");
const declare_export_declaration_1 = require("./visitors/declare_export_declaration");
const new_expression_1 = require("./visitors/new_expression");
const arrow_function_expression_1 = require("./visitors/arrow_function_expression");
const ts_module_declaration_1 = require("./visitors/ts_module_declaration");
const export_all_declaration_1 = require("./visitors/export_all_declaration");
const visitor = {
    Program: program_1.default,
    TypeAnnotation: type_annotation_1.TypeAnnotation,
    TypeAlias: type_alias_1.TypeAlias,
    TypeParameterDeclaration: type_parameter_declaration_1.TypeParameterDeclaration,
    ImportDeclaration: import_declaration_1.ImportDeclaration,
    ImportSpecifier: import_declaration_1.ImportSpecifier,
    TypeCastExpression: type_cast_expression_1.TypeCastExpression,
    OpaqueType: opaque_type_1.OpaqueType,
    DeclareClass: declare_class_1.DeclareClass,
    ClassDeclaration: class_declaration_1.ClassDeclaration,
    ClassExpression: class_declaration_1.ClassDeclaration,
    ExportAllDeclaration: export_all_declaration_1.ExportAllDeclaration,
    ExportNamedDeclaration: export_declaration_1.ExportNamedDeclaration,
    InterfaceDeclaration: interface_declaration_1.InterfaceDeclaration,
    DeclareFunction: declare_function_1.DeclareFunction,
    FunctionDeclaration: function_declaration_1.FunctionDeclaration,
    CallExpression: call_expression_1.CallExpression,
    DeclareVariable: declare_variable_1.DeclareVariable,
    DeclareTypeAlias: declare_type_alias_1.DeclareTypeAlias,
    DeclareInterface: declare_interface_1.DeclareInterface,
    DeclareOpaqueType: declare_opaque_type_1.DeclareOpaqueType,
    DeclareModuleExports: declare_module_exports_1.DeclareModuleExports,
    DeclareModule: declare_module_1.default,
    DeclareExportDeclaration: declare_export_declaration_1.DeclareExportDeclaration,
    NewExpression: new_expression_1.NewExpression,
    ArrowFunctionExpression: arrow_function_expression_1.ArrowFunctionExpression,
    TSModuleDeclaration: ts_module_declaration_1.default,
};
// tslint:disable-next-line:no-any
exports.default = (_babel, opts = {}) => {
    if (typeof opts.isJSX === 'undefined') {
        opts.isJSX = true;
    }
    return {
        name: 'babel-plugin-flow-to-typescript',
        visitor,
        // tslint:disable-next-line:no-any
        manipulateOptions(_babel, parserOpts) {
            parserOpts.plugins.push('flow');
            if (opts.isJSX) {
                parserOpts.plugins.push('jsx');
            }
            parserOpts.plugins.push('classProperties');
            parserOpts.plugins.push('objectRestSpread');
            parserOpts.plugins.push('optionalChaining');
            parserOpts.plugins.push('dynamicImport');
        },
    };
};
//# sourceMappingURL=index.js.map